//
//  SENAnalytics.h
//  Pods
//
//  This class represents a wrapper to our Analytics service provider so that we
//  interchange the provider without modifying the application.
//
//  Created by Jimmy Lu on 10/20/14.
//

#import <Foundation/Foundation.h>

#import "SENAnalyticsProvider.h"

@interface SENAnalytics : NSObject

/**
 * @method addProvider:
 *
 * @discussion
 * Add an analytics provider such that when any of the tracking methods are called,
 * the provider will be called as well.  
 *
 * @param provider: the provider to add
 */
+ (void)addProvider:(nonnull id<SENAnalyticsProvider>)provider;

/**
 * @method userWithId:didSignupWithProperties
 *
 * @discussion
 * Track the user signing up.  For some providers, special operations are needed to
 * properly link the user before sign up to events after sign up.  This method should
 * only be called once in the life time of a user's account.
 *
 * @param userId:     the identifier of the user generated by application post sign up
 * @param properties: optional user properties to associate with the user
 */
+ (void)userWithId:(nonnull NSString*)userId didSignUpWithProperties:(nullable NSDictionary*)properties;

/*
 * @method
 * Set the user id of the currently authorized user of the application so that all
 * events can be properly mapped
 *
 * @param userId:     the unique identifier of the user of the application
 * @param properties: any particular information about the user that should be tracked
 */
+ (void)setUserId:(nullable NSString*)userId properties:(nullable NSDictionary*)properties;

/**
 * @method
 * setGlobalEventProperties:
 *
 * @discussion
 * Set properties that will be sent up with all events tracked automatically
 *
 * @param properties: properties to be set on all events to be tracked
 */
+ (void)setGlobalEventProperties:(nonnull NSDictionary*)properties;

/**
 * @method
 * Set the user properties, which assumes the user has already be set with setUserId
 * or with userWithId:didSignupWithProperties:
 *
 * @param properties: properties to be set on to the user
 */
+ (void)setUserProperties:(nonnull NSDictionary*)properties;

/**
 * @method
 * Track the event by name.  This simply calls track:properties: with no properties
 *
 * @param eventName: the name of the event to use
 *
 * @see track:properties:
 */
+ (void)track:(nonnull NSString*)eventName;

/**
 * @method
 * Track the event by name, providing optionak key/value pairs to attach to the
 * event for further details
 * 
 * @param eventName:  the name of the event to use
 * @param properties: the details to add to the event
 */
+ (void)track:(nonnull NSString*)eventName properties:(nullable NSDictionary*)properties;

/**
 * @method
 * Track the error encountered by specifying the name to use as the event.  This
 * is a convenience method to track:properties where the code and message of the
 * error will be automaticaly logged as the event's properties.
 *
 * @param error:     the error to track
 * @param eventName: the name to use for the error
 */
+ (void)trackError:(nonnull NSError*)error withEventName:(nonnull NSString*)eventName;

/**
 * @method
 * Reset the current cache that might been created by the analytics provider for
 * the current user
 *
 * @param userId:     the unique identifier of the user of the application
 */
+ (void)reset:(nullable NSString*)userId;

@end
